#include <SoftwareSerial.h>

SoftwareSerial BTSerial(2, 3);  // RX, TX pins for the Bluetooth module




#define TRIG_PIN 4  // Define the pins for HC-SR04 sensor
#define ECHO_PIN 5
#define MOTOR_ENA 6                 // Enable pin for motor driver
#define MOTOR_IN1 9                 // Motor driver input pin 1
#define MOTOR_IN2 10                // Motor driver input pin 2
#define REED_SWITCH_PIN_DOOR 8      // Reed switch pin for door closed
#define REED_SWITCH_PIN_CONTACT 11  // Reed switch pin for contact detection
#define pinbitch 13 //testwr

//Relays
const int MAIN_DOOR_VALVE = A0;  // Relay 1 connected to analog pin A0
const int TRAP_DOOR_VALVE = A1;  // Relay 2 connected to analog pin A1
const int COMP1_VALVE = A2;      // Relay  3 connected to analog pin A2
const int COMP2_VALVE = A3;      // Relay 4 connected to analog pin A3


bool isMotorRunning = false;

void setup() {
  // Set the baud rate for both the hardware and software serial ports
  Serial.begin(9600);    // Serial monitor for debugging
  BTSerial.begin(9600);  // Bluetooth module baud rate

  // Define pin modes
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  pinMode(MAIN_DOOR_VALVE, OUTPUT);
  pinMode(TRAP_DOOR_VALVE, OUTPUT);
  pinMode(COMP1_VALVE, OUTPUT);
  pinMode(COMP2_VALVE, OUTPUT);


  pinMode(MOTOR_ENA, OUTPUT);
  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);
  pinMode(REED_SWITCH_PIN_DOOR, INPUT );     // Enable internal pull-up resistor for the door reed switch
  pinMode(REED_SWITCH_PIN_CONTACT, INPUT);  // Enable internal pull-up resistor for the contact reed switch
  
  pinMode(pinbitch, INPUT); //tEEST

  digitalWrite(MAIN_DOOR_VALVE, HIGH);
  digitalWrite(TRAP_DOOR_VALVE, HIGH);
  digitalWrite(COMP1_VALVE, HIGH);
  digitalWrite(COMP2_VALVE, HIGH);
}
void loop() {
    // Check the state of the pin and print it to the Serial Monitor
  int pinState = digitalRead(pinbitch);
  Serial.print("TRIGGER State: ");
  Serial.println(pinState);
  int REEDPIN = digitalRead(REED_SWITCH_PIN_DOOR);
  Serial.print("REED State: ");
  Serial.println(REEDPIN);    
  delay(500);  //need DELAY


  // Monitor the pin continuously
    // Keep monitoring the pin
    int newPinState = digitalRead(pinbitch);
    if (newPinState != pinState) {
      pinState = newPinState;
      Serial.print("Door Pin State: ");
      Serial.println(pinState);
      delay(500);  //need DELAY

  }
    int newReed = digitalRead(REED_SWITCH_PIN_DOOR);
if (newReed != REEDPIN) {
  REEDPIN = newReed;
  Serial.print("REED State: ");
  Serial.println(REEDPIN);  
  delay(500);  //need DELAY
} 
 
  int pintest = digitalRead(pinbitch);

  // Check for the received character and perform actions based on cases
  if (pintest == 1) {
    // Case A: Do something for Case A
    Serial.println("Received Case A");

    digitalWrite(MAIN_DOOR_VALVE, LOW);  // Opens the main door valve
    delay(2000);  //need DELAY
   //MAKE WHILE IF RIDER HAS NOT OPENED THE DOOR 
  
  // Wait for the door to be closed
      int DOORSENSOR = digitalRead(REED_SWITCH_PIN_DOOR);

    while (DOORSENSOR == 1) {
      Serial.println("Door is still WAITING to open");
      DOORSENSOR = digitalRead(REED_SWITCH_PIN_DOOR);
    }

     if (DOORSENSOR == 0){
       Serial.println("Door is open");
     }
      delay(500);  //need DELAY

    // Check if the door is closed using the reed switch
    if (DOORSENSOR == 1) {
      digitalWrite(MAIN_DOOR_VALVE, HIGH);  // Closes the main door valve if the door sensor detects that the door is closed

      // Check the HC-SR04 sensor values
      if (isDistanceDecreasing()) {
        // Start the motor forward for 4 seconds
        digitalWrite(TRAP_DOOR_VALVE, LOW);
        startMotorForward();
        delay(4000);  // Run the motor forward for 4 seconds (adjust as needed)
        digitalWrite(TRAP_DOOR_VALVE, HIGH);
        stopMotor();

        // Start the motor backward until the contact reed switch detects contact
        startMotorBackward();
        while (!isContactDetected()) {
          // Keep running the motor backward until contact is detected
        }
        stopMotor();

        digitalWrite(COMP1_VALVE, LOW);  // Open compartment 1
        delay(1000);                     // Open compartment 1 for 1 second
        digitalWrite(COMP1_VALVE, HIGH); // Close compartment 1
        BTSerial.println("AA");          // Call back for sequence 1
      }
    }
  }
}
// }
// void loop() {
//   if (BTSerial.available()) {
//     char receivedChar = BTSerial.read();  // Read the character received from Bluetooth
//     int pintest = digitalRead(pinbitch);

//     // Check for the received character and perform actions based on cases
//     switch (pintest) {
//       case '1':
//         // Case A: Do something for Case A
//         Serial.println("Received Case A");

//         digitalWrite(MAIN_DOOR_VALVE, LOW);  // Opens the main door valve


//         // Check if the door is closed using the reed switch
//         if (isDoorClosed()) {
//           digitalWrite(MAIN_DOOR_VALVE, HIGH);  //Closes the main door valve if the door sensor detects that the door is closed

//           // Check the HC-SR04 sensor values
//           if (isDistanceDecreasing()) {
//             // Start the motor forward for 4 seconds
//             digitalWrite(TRAP_DOOR_VALVE, LOW);
//             startMotorForward();
//             delay(4000);// Run the motor forward for 4 seconds (adjust as needed)
//             digitalWrite(TRAP_DOOR_VALVE, HIGH);
//             stopMotor();
           

//             // Start the motor backward until the contact reed switch detects contact
//             startMotorBackward();
//             while (!isContactDetected()) {
//               // Keep running the motor backward until contact is detected
//             }
//             stopMotor();
//             digitalWrite(COMP1_VALVE, LOW);  //Open compartment 1
//               delay(1000);                   // Open compartment 1 for 1 second
//             digitalWrite(COMP1_VALVE, HIGH);  //Close compartment 1
//               BTSerial.println("AA");        //call back for sequence 1
//           }
//         }
//         break;

//       case 'B':
//         // Case B: Add your code for Case B here
//         Serial.println("Received Case B");

//         digitalWrite(MAIN_DOOR_VALVE, LOW);  // Opens the main door valve


//         // Check if the door is closed using the reed switch
//         if (isDoorClosed()) {
//           digitalWrite(MAIN_DOOR_VALVE, HIGH);  //Closes the main door valve if the door sensor detects that the door is closed

//           // Check the HC-SR04 sensor values
//           if (isDistanceDecreasing()) {
//             // Start the motor forward for 4 seconds
//             digitalWrite(TRAP_DOOR_VALVE, LOW);
//             startMotorForward();
//             delay(4000);// Run the motor forward for 4 seconds (adjust as needed)
//             digitalWrite(TRAP_DOOR_VALVE, HIGH);
//             stopMotor();

//             // Start the motor backward until the contact reed switch detects contact
//             startMotorBackward();
//             while (!isContactDetected()) {
//               // Keep running the motor backward until contact is detected
//             }
//             stopMotor();
//             digitalWrite(COMP2_VALVE, LOW);  //Open compartment 2
//               delay(1000);                   // Open compartment 2 for 1 second
//             digitalWrite(COMP2_VALVE, HIGH);   //Close compartment 2
//             BTSerial.println("BB");        //call back for sequence 2
//           }
//         }
//         break;

//       case 'C':
//         // Case C: Add your code for Case C here
//         Serial.println("Received Case C");

//         digitalWrite(MAIN_DOOR_VALVE, LOW);  // Opens the main door valve


//         // Check if the door is closed using the reed switch
//         if (isDoorClosed()) {
//           digitalWrite(MAIN_DOOR_VALVE, HIGH);  //Closes the main door valve if the door sensor detects that the door is closed

//           // Check the HC-SR04 sensor values
//           if (isDistanceDecreasing()) {
//           // Start the motor forward for 4 seconds
//             digitalWrite(TRAP_DOOR_VALVE, LOW);
//             startMotorForward();
//             delay(4000);// Run the motor forward for 4 seconds (adjust as needed)
//             digitalWrite(TRAP_DOOR_VALVE, HIGH);
//             stopMotor();

//             // Start the motor backward until the contact reed switch detects contact
//             startMotorBackward();
//             while (!isContactDetected()) {
//               // Keep running the motor backward until contact is detected
//             }
//             stopMotor();
//             BTSerial.println("CC");  //call back for sequence 3
//           }
//         }
//         break;

//       case 'D':
//         // Case D: Add your code for Case C here
//         Serial.println("Received Case D");

//         digitalWrite(MAIN_DOOR_VALVE, LOW);  // Opens the main door valve


//         // Check if the door is closed using the reed switch
//         if (isDoorClosed()) {
//           digitalWrite(MAIN_DOOR_VALVE, HIGH);  //Closes the main door valve if the door sensor detects that the door is closed

//           // Check the HC-SR04 sensor values
//           if (isDistanceDecreasing()) {
//             // Start the motor forward for 4 seconds
//             digitalWrite(TRAP_DOOR_VALVE, LOW);
//             startMotorForward();
//             delay(4000);// Run the motor forward for 4 seconds (adjust as needed)
//             digitalWrite(TRAP_DOOR_VALVE, HIGH);
//             stopMotor();

//             // Start the motor backward until the contact reed switch detects contact
//             startMotorBackward();
//             while (!isContactDetected()) {
//               // Keep running the motor backward until contact is detected
//             }
//             stopMotor();
//             BTSerial.println("DD");  //call back for sequence 4
//           }
//         }
//         break;

//       default:
//         // If an unrecognized character is received, do nothing
//         break;
//     }
//   }
// }

bool isDistanceDecreasing() {
  // Measure distance with HC-SR04
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  float distance = (duration / 2.0) * 0.0343;  // Calculate distance in cm

  Serial.print("Distance: ");
  Serial.println(distance);

  // You can adjust this threshold as needed
  return distance < 30;  // Example threshold: 30 cm
}

bool isDoorClosed(){
  return digitalRead(REED_SWITCH_PIN_DOOR) == HIGH;
}

bool isContactDetected() {
  return digitalRead(REED_SWITCH_PIN_CONTACT) == HIGH;
}

void startMotorForward() {
  digitalWrite(MOTOR_ENA, HIGH);
  delay (200);
  digitalWrite(MOTOR_IN1, HIGH);  // Motor input 1 HIGH
  digitalWrite(MOTOR_IN2, LOW);   // Motor input 2 LOW
  isMotorRunning = true;
}

void startMotorBackward() {
  digitalWrite(MOTOR_ENA, HIGH);  // Enable the motor driver
   delay (200);
  digitalWrite(MOTOR_IN1, LOW);   // Motor input 1 LOW
  digitalWrite(MOTOR_IN2, HIGH);  // Motor input 2 HIGH
  isMotorRunning = true;
}

void stopMotor() {
  digitalWrite(MOTOR_ENA, LOW);  // Disable the motor driver
   delay (200);
   digitalWrite(MOTOR_IN1, LOW);   // Motor input 1 LOW
  digitalWrite(MOTOR_IN2, LOW);  // Motor input 2 LOW
  isMotorRunning = false;
}
